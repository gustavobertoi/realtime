// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChannel = `-- name: CreateChannel :exec
INSERT INTO channels (name, type, config, created_at, updated_at) VALUES ($1, $2, $3, $4, $5)
`

type CreateChannelParams struct {
	Name      string
	Type      string
	Config    []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) error {
	_, err := q.db.Exec(ctx, createChannel,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels WHERE id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteChannel, id)
	return err
}

const findManyChannels = `-- name: FindManyChannels :many
SELECT id, name, type, config, created_at, updated_at FROM channels OFFSET $1 LIMIT $2
`

type FindManyChannelsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) FindManyChannels(ctx context.Context, arg FindManyChannelsParams) ([]Channel, error) {
	rows, err := q.db.Query(ctx, findManyChannels, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOneChannelById = `-- name: FindOneChannelById :one
SELECT id, name, type, config, created_at, updated_at FROM channels WHERE id = $1
`

func (q *Queries) FindOneChannelById(ctx context.Context, id string) (Channel, error) {
	row := q.db.QueryRow(ctx, findOneChannelById, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateChannel = `-- name: UpdateChannel :exec
UPDATE channels SET name = $1, type = $2, config = $3, updated_at = $4 WHERE id = $5
`

type UpdateChannelParams struct {
	Name      string
	Type      string
	Config    []byte
	UpdatedAt pgtype.Timestamp
	ID        string
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) error {
	_, err := q.db.Exec(ctx, updateChannel,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
